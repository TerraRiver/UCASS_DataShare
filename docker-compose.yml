version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:16-alpine
    container_name: ucass_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ucass_datashare}
      POSTGRES_USER: ${POSTGRES_USER:-ucass_datashare}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Ww2368963068}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ucass_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ucass_datashare}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 后端 API 服务
  api:
    build:
      context: ./apps/api-backend
      dockerfile: Dockerfile
    container_name: ucass_api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 30002
      DATABASE_URL: postgresql://${POSTGRES_USER:-ucass_datashare}:${POSTGRES_PASSWORD:-Ww2368963068}@postgres:5432/${POSTGRES_DB:-ucass_datashare}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10737418240}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
    volumes:
      - uploads_data:/app/uploads
    networks:
      - ucass_network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        bunx prisma migrate deploy &&
        bunx prisma db seed &&
        bun run src/index.ts
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:30002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端 Web 服务
  web:
    build:
      context: .
      dockerfile: ./apps/web-frontend/Dockerfile
    container_name: ucass_web
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 30001
      API_BASE_URL: http://api:30002
    networks:
      - ucass_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:30001"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: ucass_nginx
    restart: unless-stopped
    depends_on:
      - web
      - api
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - uploads_data:/var/www/uploads:ro
      # 如果需要 HTTPS，取消注释以下行并提供证书
      # - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ucass_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# 网络配置
networks:
  ucass_network:
    driver: bridge

# 数据卷
volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
